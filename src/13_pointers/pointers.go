// --------------------------------------------------------------
// author:   hoojo
// email:    hoojo_@126.com
// github:   https://github.com/hooj0
// create:   2018-07-08
// copyright by hoojo@2018
// --------------------------------------------------------------



/* ---------------------------------------------------------------
point
==================================================================
指针 保存了值的内存地址，可以访问或设置指向内存地址的数据
------------------------------------------------------------------
类型 *T 是指向 T 类型值的指针，其null值为 nil

示例：
	var p *int // 声明一个int类型指针，默认值 nil

	i := 12 // 声明一个变量
	p = &i	// p指针指向 i 的内存地址

	// 通过指针 p 读取 i
	fmt.Println(*p) // 通过 *p 读取内存地址对应的数据
	fmt.Println(i)	// i = *p

	// 通过指针 p 设置 i
	*p = 31	// 操作指向内存地址的数据，进行赋值
	fmt.Println(i)	// i = *p
------------------------------------------------------------------
& 操作符会生成一个指向其操作数的指针
* 操作符表示指针指向的底层值
这也就是通常所说的“间接引用”或“重定向”
------------------------------------------------------------------*/

package main

import "fmt"

func example()  {
	var p *int // 声明一个int类型指针，默认值 nil

	i := 12 // 声明一个变量
	p = &i  // p指针指向 i 的内存地址

	// 通过指针 p 读取 i
	fmt.Println(*p) // 通过 *p 读取内存地址对应的数据
	fmt.Println(i)  // i = *p

	// 通过指针 p 设置 i
	*p = 31        // 操作指向内存地址的数据，进行赋值
	fmt.Println(i) // i = *p
}

func main() {

	example()

	fmt.Println("--------------------------------------")
	var i, j = 42, 200

	// 声明一个p指针，指向i内存地址
	p := &i
	// 访问i的值，也就是p指针
	fmt.Println(*p)  // 42

	// 设置 p 指针内存地址指向的数据，也就是i的值
	*p = 20
	fmt.Println(*p) // 20
	fmt.Println(i) 	// 20

	// 指针指向j， 赋值给p
	p = &j
	// 读取 p 指针数据，也就是访问j
	fmt.Println(*p) // 200

	// 再次赋值运算
	*p = *p / 5 	// 200 ÷ 5
	// 访问p指针
	fmt.Println(*p) // 40
	fmt.Println(j)	// 40
}
