// --------------------------------------------------------------
// author:   hoojo
// email:    hoojo_@126.com
// github:   https://github.com/hooj0
// create:   2018-07-24
// copyright by hoojo@2018
// --------------------------------------------------------------



/* ---------------------------------------------------------------
channel
==================================================================
信道、通道 是一种通信的管道，可以传递数据，传递带有类型的数据
------------------------------------------------------------------
语法：
	ch <- v   	 // 将 v 发送至信道 ch。
	v := <-ch  	 // 从 ch 接收值并赋予 v。

“箭头”就是数据流的方向

构建方式：
	ch := make(chan int)
------------------------------------------------------------------
通道 和映射、切片一样，在使用之前必须用 ch := make(chan int) 创建
通道 在发送和接收操作的另一端准备号之前，都会阻塞
通道 在发送接收之前的阻塞，使得 routine 可以在没有显示的 锁 和 竟态变量 的情况下同步
------------------------------------------------------------------*/
package main

import "fmt"

func sum(arrays []int, channel chan int)  {
	ret := 0

	for _, v := range arrays {
		ret += v
	}

	// 将结果赋值/发送给通道
	channel <- ret
}

func main() {

	var numbers = []int { 2, 5, 3, 2, 8, 0, 7, 9, 6, 1 }
	c := make(chan int)		// 创建通道

	// 两个线程，每个算数组一半之和
	go sum(numbers[:len(numbers) / 2], c)
	go sum(numbers[len(numbers) / 2:], c)

	foo, bar := <- c, <- c	// 进行发送结果赋值，在此之前会阻塞

	fmt.Println("foo: ", foo, ", bar: ", bar, ", foo + bar = ", foo + bar)
	// foo:  20 , bar:  23 , foo + bar =  43
}
