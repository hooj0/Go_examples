// --------------------------------------------------------------
// author:   hoojo
// email:    hoojo_@126.com
// github:   https://github.com/hooj0
// create:   2018-07-08
// copyright by hoojo@2018
// --------------------------------------------------------------



/* ---------------------------------------------------------------
defer stack
==================================================================
defer栈 多个defer推迟执行的函数被压入到defer栈中，
		当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。
------------------------------------------------------------------
defer语句 可以推迟多个语句延迟执行，被推迟的语句会保存在defer栈中
defer语句 栈中的推迟函数在外层函数返回时，才被执行
defer语句 栈中的推迟函数的执行顺序是按照 后进先出（先进后出）原则执行
------------------------------------------------------------------*/

package main

import "fmt"

func main() {

	for i := 0; i < 10; i++ {
		defer fmt.Println("i: ", i)
	}

	// 先运行 done，再运行 defer 语句
	fmt.Println("run done!")
}


/*
output：
----------------------------------------------------------------
run done!
i:  9
i:  8
i:  7
i:  6
i:  5
i:  4
i:  3
i:  2
i:  1
i:  0
*/